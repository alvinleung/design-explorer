{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\nimport useAnimationFrame from \"./useAnimationFrame\"; // private variable for this component\n\nlet currentZoom = 0;\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n}; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = props.width;\n  const canvasHeight = props.height;\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const [imgLoaded, setImgLoaded] = useState([false]);\n  const [imgList, setImageList] = useState([]);\n  const cameraPosition = props.cameraPosition;\n  const zoom = props.zoom;\n  useEffect(() => {\n    // grab the context from the canvas\n    ctxRef.current = canvasRef.current.getContext(\"2d\"); // Load the svg files\n\n    let loadedImageCount = 0;\n    console.log(\"begin loading images\");\n    setImageList(props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImageCount++;\n\n        if (imgLoaded === imgList.length) {\n          // all the image is loaded\n          setImgLoaded(true);\n        }\n      });\n      return img;\n    }));\n    return () => {};\n  }, []); // load files only once, no dependency\n\n  useAnimationFrame(deltaTime => {\n    ctxRef.current.clearRect(0, 0, window.innerWidth, window.innerHeight); // update every animation cycle\n\n    repaintCanvas(ctxRef.current, imgList, cameraPosition, zoom, deltaTime);\n  });\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  });\n} // ===============================\n//\n// CODE FOR THE ANIMATION CYCLE\n//\n// ===============================\n\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom, deltaTime) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","useAnimationFrame","currentZoom","currentCameraPos","x","y","Viewport","props","canvasWidth","width","canvasHeight","height","canvasRef","ctxRef","imgLoaded","setImgLoaded","imgList","setImageList","cameraPosition","zoom","current","getContext","loadedImageCount","console","log","src","map","imgUrl","img","Image","addEventListener","length","deltaTime","clearRect","window","innerWidth","innerHeight","repaintCanvas","ctx","imgs","renderImages","fillText","paddingBetweenImages","currentDrawY","i","drawImage","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\nimport useAnimationFrame from \"./useAnimationFrame\";\n\n// private variable for this component\nlet currentZoom = 0;\nlet currentCameraPos = { x: 0, y: 0 };\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = props.width;\n  const canvasHeight = props.height;\n\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n\n  const [imgLoaded, setImgLoaded] = useState([false]);\n  const [imgList, setImageList] = useState([]);\n\n  const cameraPosition = props.cameraPosition;\n  const zoom = props.zoom;\n\n  useEffect(() => {\n    // grab the context from the canvas\n    ctxRef.current = canvasRef.current.getContext(\"2d\");\n\n    // Load the svg files\n    let loadedImageCount = 0;\n    console.log(\"begin loading images\");\n    setImageList(\n      props.src.map((imgUrl) => {\n        const img = new Image();\n        img.src = imgUrl;\n        img.addEventListener(\"load\", () => {\n          console.log(\"Viewport loaded image: \" + imgUrl);\n          loadedImageCount++;\n\n          if (imgLoaded === imgList.length) {\n            // all the image is loaded\n            setImgLoaded(true);\n          }\n        });\n        return img;\n      })\n    );\n    return () => {};\n  }, []); // load files only once, no dependency\n\n  useAnimationFrame((deltaTime) => {\n    ctxRef.current.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    // update every animation cycle\n    repaintCanvas(ctxRef.current, imgList, cameraPosition, zoom, deltaTime);\n  });\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\n// ===============================\n//\n// CODE FOR THE ANIMATION CYCLE\n//\n// ===============================\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom, deltaTime) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}