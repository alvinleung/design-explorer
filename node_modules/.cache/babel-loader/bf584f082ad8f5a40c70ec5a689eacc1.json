{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = props.width;\n  const canvasHeight = props.height;\n  const canvasRef = useRef(null);\n  const [imgLoaded, setImgLoaded] = useState([false]);\n  const [imgList, setImageList] = useState([]);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // canvas update\n\n    update();\n    return () => {};\n  }, [props.cameraPosition, props.zoom, imgLoaded, imgList]);\n  useEffect(() => {\n    // Load the svg files\n    let loadedImageCount = 0;\n    setImageList(props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImageCount++;\n\n        if (imgLoaded === imgList.length) {\n          // all the image is loaded\n          setImgLoaded(true);\n        }\n      });\n      return img;\n    }));\n    return () => {};\n  }, []); // load files only once, no dependency\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  });\n}\n\nlet currentZoom = 0;\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n};\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","canvasWidth","width","canvasHeight","height","canvasRef","imgLoaded","setImgLoaded","imgList","setImageList","canvas","current","ctx","getContext","update","cameraPosition","zoom","loadedImageCount","src","map","imgUrl","img","Image","addEventListener","console","log","length","currentZoom","currentCameraPos","x","y","repaintCanvas","imgs","renderImages","fillText","paddingBetweenImages","currentDrawY","i","drawImage","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = props.width;\n  const canvasHeight = props.height;\n\n  const canvasRef = useRef(null);\n\n  const [imgLoaded, setImgLoaded] = useState([false]);\n  const [imgList, setImageList] = useState([]);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // canvas update\n\n    update();\n    return () => {};\n  }, [props.cameraPosition, props.zoom, imgLoaded, imgList]);\n\n  useEffect(() => {\n    // Load the svg files\n    let loadedImageCount = 0;\n    setImageList(\n      props.src.map((imgUrl) => {\n        const img = new Image();\n        img.src = imgUrl;\n        img.addEventListener(\"load\", () => {\n          console.log(\"Viewport loaded image: \" + imgUrl);\n          loadedImageCount++;\n\n          if (imgLoaded === imgList.length) {\n            // all the image is loaded\n            setImgLoaded(true);\n          }\n        });\n        return img;\n      })\n    );\n    return () => {};\n  }, []); // load files only once, no dependency\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\nlet currentZoom = 0;\nlet currentCameraPos = { x: 0, y: 0 };\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}