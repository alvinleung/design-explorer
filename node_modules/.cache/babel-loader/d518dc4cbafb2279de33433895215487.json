{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // purpose of this component\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false); // managing zoom\n\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 300;\n  const MIN_ZOOM = 300;\n  const [viewportZoom, setViewportZoom] = useState(1); // the screen coordinate of the zoom point\n\n  const [zoomPivot, setZoomPivot] = useState({\n    x: 0,\n    y: 0\n  }); // handling the position panning state\n\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // grab the html reference of the container to get the beginning position\n\n  const viewportContainerRef = useRef(null);\n  const viewportPannerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + ZOOM_STEP);\n    } else if (zooming === ZOOMMODE_OUT) {\n      setViewportZoom(viewportZoom - ZOOM_STEP);\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true); // initialise drag offset value\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n    // calculate zoom value\n\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY * 10; // set the zoom level\n\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM)); // set the focus point of zoom\n    // TODO: create figure out how to have it zoom according to the mouse pointing position\n\n    const viewportRect = viewportContainerRef.current.getBoundingClientRect();\n    setZoomPivot({\n      x: viewportRect.width / 2,\n      y: viewportRect.height / 2\n    });\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n      const maxPos = {\n        x: 0,\n        y: 0\n      };\n      const minPos = {\n        x: -(viewportContainerRef.current.scrollWidth - viewportContainerRef.current.clientWidth),\n        y: -(viewportContainerRef.current.scrollHeight - viewportContainerRef.current.clientHeight)\n      };\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: clamp(e.nativeEvent.pageX - dragOffset.x, minPos.x, maxPos.x),\n        y: clamp(e.nativeEvent.pageY - dragOffset.y, minPos.y, maxPos.y)\n      });\n    }\n  } // move the viewport\n\n\n  if (viewportContainerRef.current) {\n    viewportContainerRef.current.scrollLeft = -viewportOffsetPos.x;\n    viewportContainerRef.current.scrollTop = -viewportOffsetPos.y;\n  } // code for updating the viewport position when external code modify the scroll position\n\n\n  const scrollHandler = useCallback(e => {\n    setViewportOffsetPos({\n      x: -viewportContainerRef.current.scrollLeft,\n      y: -viewportContainerRef.current.scrollTop\n    });\n  }, [setViewportOffsetPos]);\n  useEffect(() => {\n    viewportContainerRef.current.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      viewportContainerRef.current.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [viewportContainerRef, scrollHandler]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-container\",\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    onClick: mouseClickHandler,\n    onWheel: mouseWheelHandler,\n    ref: viewportContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {// transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px)`,\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, \"test\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-content\",\n    style: {\n      transformOrigin: `${-viewportOffsetPos.x + zoomPivot.x}px ${-viewportOffsetPos.y + zoomPivot.y}px `,\n      transform: `perspective(500px) translate3d(0,0, ${viewportZoom}px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, props.src.map((imgUrl, index) => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      id: index,\n      key: index,\n      src: imgUrl,\n      alt: \"Design Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    });\n  }))));\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","dragging","setDragging","ZOOMMODE_IDLE","ZOOMMODE_IN","ZOOMMODE_OUT","zooming","setZooming","ZOOM_STEP","MAX_ZOOM","MIN_ZOOM","viewportZoom","setViewportZoom","zoomPivot","setZoomPivot","x","y","viewportOffsetPos","setViewportOffsetPos","dragOffset","setDragOffset","viewportContainerRef","viewportPannerRef","mouseClickHandler","e","mouseDownHandler","stopPropagation","preventDefault","viewportElmPagePos","current","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","mouseUpHandler","mouseWheelHandler","newZoomValue","deltaY","clamp","viewportRect","width","height","mouseMoveHandler","maxPos","minPos","scrollWidth","clientWidth","scrollHeight","clientHeight","scrollLeft","scrollTop","scrollHandler","addEventListener","removeEventListener","transformOrigin","transform","src","map","imgUrl","index","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// purpose of this component\n\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n\n  // managing zoom\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 300;\n  const MIN_ZOOM = 300;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  // the screen coordinate of the zoom point\n  const [zoomPivot, setZoomPivot] = useState({ x: 0, y: 0 });\n\n  // handling the position panning state\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // grab the html reference of the container to get the beginning position\n  const viewportContainerRef = useRef(null);\n  const viewportPannerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + ZOOM_STEP);\n    } else if (zooming === ZOOMMODE_OUT) {\n      setViewportZoom(viewportZoom - ZOOM_STEP);\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n\n    // initialise drag offset value\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y,\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n\n    // calculate zoom value\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY * 10;\n    // set the zoom level\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM));\n\n    // set the focus point of zoom\n    // TODO: create figure out how to have it zoom according to the mouse pointing position\n    const viewportRect = viewportContainerRef.current.getBoundingClientRect();\n    setZoomPivot({\n      x: viewportRect.width / 2,\n      y: viewportRect.height / 2,\n    });\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n\n      const maxPos = {\n        x: 0,\n        y: 0,\n      };\n      const minPos = {\n        x: -(\n          viewportContainerRef.current.scrollWidth -\n          viewportContainerRef.current.clientWidth\n        ),\n        y: -(\n          viewportContainerRef.current.scrollHeight -\n          viewportContainerRef.current.clientHeight\n        ),\n      };\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: clamp(e.nativeEvent.pageX - dragOffset.x, minPos.x, maxPos.x),\n        y: clamp(e.nativeEvent.pageY - dragOffset.y, minPos.y, maxPos.y),\n      });\n    }\n  }\n\n  // move the viewport\n  if (viewportContainerRef.current) {\n    viewportContainerRef.current.scrollLeft = -viewportOffsetPos.x;\n    viewportContainerRef.current.scrollTop = -viewportOffsetPos.y;\n  }\n\n  // code for updating the viewport position when external code modify the scroll position\n  const scrollHandler = useCallback(\n    (e) => {\n      setViewportOffsetPos({\n        x: -viewportContainerRef.current.scrollLeft,\n        y: -viewportContainerRef.current.scrollTop,\n      });\n    },\n    [setViewportOffsetPos]\n  );\n  useEffect(() => {\n    viewportContainerRef.current.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      viewportContainerRef.current.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [viewportContainerRef, scrollHandler]);\n\n  return (\n    <div\n      className=\"viewport-container\"\n      onMouseDown={mouseDownHandler}\n      onMouseUp={mouseUpHandler}\n      onMouseMove={mouseMoveHandler}\n      onClick={mouseClickHandler}\n      onWheel={mouseWheelHandler}\n      ref={viewportContainerRef}\n    >\n      {/* outer div control the panning */}\n      <div\n        style={\n          {\n            // transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px)`,\n          }\n        }\n      >\n        test\n        {/* inner div control the zooming */}\n        <div\n          className=\"viewport-content\"\n          style={{\n            transformOrigin: `${-viewportOffsetPos.x + zoomPivot.x}px ${\n              -viewportOffsetPos.y + zoomPivot.y\n            }px `,\n            transform: `perspective(500px) translate3d(0,0, ${viewportZoom}px)`,\n          }}\n        >\n          {props.src.map((imgUrl, index) => {\n            return (\n              <img id={index} key={index} src={imgUrl} alt=\"Design Section\" />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n"]},"metadata":{},"sourceType":"module"}