{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\nfunction initCanvas(canvas) {\n  const ctx = canvas.getContext(\"2d\"); // clear everything on the canvas\n\n  ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // ctx.fillStyle = \"#FF0000\";\n\n  ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n  ctx.translate(10, 10); // render svg file on canvas\n\n  let img = new Image();\n  img.src = props.src[0];\n  img.addEventListener(\"load\", () => {\n    ctx.drawImage(img, 0, 0);\n  });\n} // Canvas Implementation of the\n\n\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // initialise the canvas, pass in the canvas element\n    initCanvas(canvasRef.current);\n  });\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  });\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","initCanvas","canvas","ctx","getContext","clearRect","window","innerHeight","innerWidth","fillRect","translate","img","Image","src","props","addEventListener","drawImage","Viewport","canvasWidth","canvasHeight","canvasRef","current","clamp","value","min","max"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,OAAO,iBAAP;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ,CAD0B,CAG1B;;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBC,MAAM,CAACC,WAA3B,EAAwCD,MAAM,CAACE,UAA/C,EAJ0B,CAM1B;;AACAL,EAAAA,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBH,MAAM,CAACE,UAA1B,EAAsCF,MAAM,CAACC,WAA7C;AAEAJ,EAAAA,GAAG,CAACO,SAAJ,CAAc,EAAd,EAAkB,EAAlB,EAT0B,CAW1B;;AACA,MAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,GAAJ,GAAUC,KAAK,CAACD,GAAN,CAAU,CAAV,CAAV;AACAF,EAAAA,GAAG,CAACI,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;AACjCZ,IAAAA,GAAG,CAACa,SAAJ,CAAcL,GAAd,EAAmB,CAAnB,EAAsB,CAAtB;AACD,GAFD;AAGD,C,CAED;;;AACA,SAASM,QAAT,CAAkBH,KAAlB,EAAyB;AACvB,QAAMI,WAAW,GAAG,IAApB;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAMC,SAAS,GAAGtB,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAE,IAAAA,UAAU,CAACmB,SAAS,CAACC,OAAX,CAAV;AACD,GAHQ,CAAT;AAKA,sBAAO;AAAQ,IAAA,GAAG,EAAED,SAAb;AAAwB,IAAA,KAAK,EAAEF,WAA/B;AAA4C,IAAA,MAAM,EAAEC,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,SAASG,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAIF,KAAK,GAAGC,GAAZ,EAAiB,OAAOA,GAAP;AACjB,MAAID,KAAK,GAAGE,GAAZ,EAAiB,OAAOA,GAAP;AACjB,SAAOF,KAAP;AACD;;AAED,eAAeN,QAAf,C,CAEA;AAEA;AACA;AAEA;AACA","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\nfunction initCanvas(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n\n  // clear everything on the canvas\n  ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n\n  // ctx.fillStyle = \"#FF0000\";\n  ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n\n  ctx.translate(10, 10);\n\n  // render svg file on canvas\n  let img = new Image();\n  img.src = props.src[0];\n  img.addEventListener(\"load\", () => {\n    ctx.drawImage(img, 0, 0);\n  });\n}\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // initialise the canvas, pass in the canvas element\n    initCanvas(canvasRef.current);\n  });\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}