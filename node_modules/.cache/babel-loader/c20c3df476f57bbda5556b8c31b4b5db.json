{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/designExplorer.js\";\nimport React from \"react\";\nimport { useState, useRef } from \"react\";\nimport Viewport from \"./viewport\"; // utility function for min-maxing\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nfunction DesignExplorer() {\n  const imgList = [`${process.env.PUBLIC_URL}/img/8 Viewing your tasks.svg`, `${process.env.PUBLIC_URL}/img/9 Contacting a client.svg`, `${process.env.PUBLIC_URL}/img/10 Contacting a helper.svg`]; // static parameters\n\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 100;\n  const MIN_ZOOM = -400; // for controlling the viewports\n\n  const [dragging, setDragging] = useState(false);\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewporCameraPos, setViewportCameraPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // refs\n\n  const viewportContainerRef = useRef(null);\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // initialize the dragging parameter\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewporCameraPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewporCameraPos.y\n    }); // enter dragging mode\n\n    setDragging(true);\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n    // calculate zoom value\n\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY; // set the zoom level\n\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM));\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      const maxPos = {\n        x: 0,\n        y: 0\n      };\n      const minPos = {\n        x: -(viewportContainerRef.current.scrollWidth - viewportContainerRef.current.clientWidth),\n        y: -(viewportContainerRef.current.scrollHeight - viewportContainerRef.current.clientHeight)\n      };\n      setViewportCameraPos({\n        // for some reason react glitches when we use offsetX\n        x: clamp(e.nativeEvent.pageX - dragOffset.x, minPos.x, maxPos.x),\n        y: clamp(e.nativeEvent.pageY - dragOffset.y, minPos.y, maxPos.y)\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: viewportContainerRef,\n    className: \"viewport-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Viewport, {\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    camearPosition: viewportCamearPos,\n    zoom: viewportZoom,\n    src: imgList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default DesignExplorer;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/designExplorer.js"],"names":["React","useState","useRef","Viewport","clamp","value","min","max","DesignExplorer","imgList","process","env","PUBLIC_URL","ZOOM_STEP","MAX_ZOOM","MIN_ZOOM","dragging","setDragging","viewportZoom","setViewportZoom","viewporCameraPos","setViewportCameraPos","x","y","dragOffset","setDragOffset","viewportContainerRef","mouseDownHandler","e","stopPropagation","preventDefault","viewportElmPagePos","current","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","mouseUpHandler","mouseWheelHandler","newZoomValue","deltaY","mouseMoveHandler","maxPos","minPos","scrollWidth","clientWidth","scrollHeight","clientHeight","viewportCamearPos"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useRef } from \"react\";\nimport Viewport from \"./viewport\";\n\n// utility function for min-maxing\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nfunction DesignExplorer() {\n  const imgList = [\n    `${process.env.PUBLIC_URL}/img/8 Viewing your tasks.svg`,\n    `${process.env.PUBLIC_URL}/img/9 Contacting a client.svg`,\n    `${process.env.PUBLIC_URL}/img/10 Contacting a helper.svg`,\n  ];\n\n  // static parameters\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 100;\n  const MIN_ZOOM = -400;\n\n  // for controlling the viewports\n  const [dragging, setDragging] = useState(false);\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewporCameraPos, setViewportCameraPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // refs\n  const viewportContainerRef = useRef(null);\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // initialize the dragging parameter\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewporCameraPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewporCameraPos.y,\n    });\n\n    // enter dragging mode\n    setDragging(true);\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n\n    // calculate zoom value\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY;\n    // set the zoom level\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM));\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      const maxPos = {\n        x: 0,\n        y: 0,\n      };\n      const minPos = {\n        x: -(\n          viewportContainerRef.current.scrollWidth -\n          viewportContainerRef.current.clientWidth\n        ),\n        y: -(\n          viewportContainerRef.current.scrollHeight -\n          viewportContainerRef.current.clientHeight\n        ),\n      };\n\n      setViewportCameraPos({\n        // for some reason react glitches when we use offsetX\n        x: clamp(e.nativeEvent.pageX - dragOffset.x, minPos.x, maxPos.x),\n        y: clamp(e.nativeEvent.pageY - dragOffset.y, minPos.y, maxPos.y),\n      });\n    }\n  }\n  return (\n    <div ref={viewportContainerRef} className=\"viewport-container\">\n      <Viewport\n        onMouseDown={mouseDownHandler}\n        onMouseUp={mouseUpHandler}\n        onMouseMove={mouseMoveHandler}\n        camearPosition={viewportCamearPos}\n        zoom={viewportZoom}\n        src={imgList}\n      />\n    </div>\n  );\n}\n\nexport default DesignExplorer;\n"]},"metadata":{},"sourceType":"module"}