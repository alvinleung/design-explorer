{"ast":null,"code":"// code adapted from\n// https://css-tricks.com/using-requestanimationframe-with-react-hooks/\nimport React from \"react\";\n\nconst useAnimationFrame = callback => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = time => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []); // Make sure the effect runs only once\n};\n\nexport default useAnimationFrame;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/useAnimationFrame.js"],"names":["React","useAnimationFrame","callback","requestRef","useRef","previousTimeRef","animate","time","current","undefined","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame"],"mappings":"AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACtC;AACA;AACA,QAAMC,UAAU,GAAGH,KAAK,CAACI,MAAN,EAAnB;AACA,QAAMC,eAAe,GAAGL,KAAK,CAACI,MAAN,EAAxB;;AAEA,QAAME,OAAO,GAAIC,IAAD,IAAU;AACxB,QAAIF,eAAe,CAACG,OAAhB,KAA4BC,SAAhC,EAA2C;AACzC,YAAMC,SAAS,GAAGH,IAAI,GAAGF,eAAe,CAACG,OAAzC;AACAN,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD;;AACDL,IAAAA,eAAe,CAACG,OAAhB,GAA0BD,IAA1B;AACAJ,IAAAA,UAAU,CAACK,OAAX,GAAqBG,qBAAqB,CAACL,OAAD,CAA1C;AACD,GAPD;;AASAN,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpBT,IAAAA,UAAU,CAACK,OAAX,GAAqBG,qBAAqB,CAACL,OAAD,CAA1C;AACA,WAAO,MAAMO,oBAAoB,CAACV,UAAU,CAACK,OAAZ,CAAjC;AACD,GAHD,EAGG,EAHH,EAfsC,CAkB9B;AACT,CAnBD;;AAqBA,eAAeP,iBAAf","sourcesContent":["// code adapted from\n// https://css-tricks.com/using-requestanimationframe-with-react-hooks/\n\nimport React from \"react\";\n\nconst useAnimationFrame = (callback) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = (time) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []); // Make sure the effect runs only once\n};\n\nexport default useAnimationFrame;\n"]},"metadata":{},"sourceType":"module"}