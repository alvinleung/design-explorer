{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false); // managing zoom\n\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 100;\n  const MIN_ZOOM = -400;\n  const [viewportZoom, setViewportZoom] = useState(1); // the screen coordinate of the zoom point\n\n  const [zoomPivot, setZoomPivot] = useState({\n    x: 0,\n    y: 0\n  }); // handling the position panning state\n\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // grab the html reference of the container to get the beginning position\n\n  const viewportContainerRef = useRef(null);\n  const viewportPannerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + ZOOM_STEP);\n    } else if (zooming === ZOOMMODE_OUT) {\n      setViewportZoom(viewportZoom - ZOOM_STEP);\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true); // initialise drag offset value\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y\n    }); // disable smooth scroll in css, or else it will glitch when panning with scrollTop, scrollLeft\n\n    viewportContainerRef.current.style.scrollBehavior = \"unset\";\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false); // reset the smooth scroll behaviour\n\n    viewportContainerRef.current.style.scrollBehavior = \"smooth\";\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n    // calculate zoom value\n\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY * 10; // set the zoom level\n\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM)); // set the focus point of zoom\n    // TODO: create figure out how to have it zoom according to the mouse pointing position\n\n    const viewportRect = viewportContainerRef.current.getBoundingClientRect();\n    setZoomPivot({\n      x: viewportRect.width / 2,\n      y: viewportRect.height / 2\n    });\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n      const maxPos = {\n        x: 0,\n        y: 0\n      };\n      const minPos = {\n        x: -(viewportContainerRef.current.scrollWidth - viewportContainerRef.current.clientWidth),\n        y: -(viewportContainerRef.current.scrollHeight - viewportContainerRef.current.clientHeight)\n      };\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: clamp(e.nativeEvent.pageX - dragOffset.x, minPos.x, maxPos.x),\n        y: clamp(e.nativeEvent.pageY - dragOffset.y, minPos.y, maxPos.y)\n      });\n    }\n  } // move the viewport\n\n\n  if (viewportContainerRef.current) {\n    viewportContainerRef.current.scrollLeft = -viewportOffsetPos.x;\n    viewportContainerRef.current.scrollTop = -viewportOffsetPos.y;\n  } // code for updating the viewport position when external code modify the scroll position\n\n\n  const scrollHandler = useCallback(e => {// setViewportOffsetPos({\n    //   x: -viewportContainerRef.current.scrollLeft,\n    //   y: -viewportContainerRef.current.scrollTop,\n    // });\n  }, [setViewportOffsetPos]);\n  useEffect(() => {\n    viewportContainerRef.current.addEventListener(\"scroll\", scrollHandler); //\n\n    return () => {\n      viewportContainerRef.current.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [viewportContainerRef, scrollHandler]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 10\n    }\n  });\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","dragging","setDragging","zooming","setZooming","ZOOMMODE_IDLE","ZOOM_STEP","MAX_ZOOM","MIN_ZOOM","viewportZoom","setViewportZoom","zoomPivot","setZoomPivot","x","y","viewportOffsetPos","setViewportOffsetPos","dragOffset","setDragOffset","viewportContainerRef","viewportPannerRef","mouseClickHandler","e","ZOOMMODE_IN","ZOOMMODE_OUT","mouseDownHandler","stopPropagation","preventDefault","viewportElmPagePos","current","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","style","scrollBehavior","mouseUpHandler","mouseWheelHandler","newZoomValue","deltaY","clamp","viewportRect","width","height","mouseMoveHandler","maxPos","minPos","scrollWidth","clientWidth","scrollHeight","clientHeight","scrollLeft","scrollTop","scrollHandler","addEventListener","removeEventListener","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n\n  // managing zoom\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 100;\n  const MIN_ZOOM = -400;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  // the screen coordinate of the zoom point\n  const [zoomPivot, setZoomPivot] = useState({ x: 0, y: 0 });\n\n  // handling the position panning state\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // grab the html reference of the container to get the beginning position\n  const viewportContainerRef = useRef(null);\n  const viewportPannerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + ZOOM_STEP);\n    } else if (zooming === ZOOMMODE_OUT) {\n      setViewportZoom(viewportZoom - ZOOM_STEP);\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n\n    // initialise drag offset value\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y,\n    });\n\n    // disable smooth scroll in css, or else it will glitch when panning with scrollTop, scrollLeft\n    viewportContainerRef.current.style.scrollBehavior = \"unset\";\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n\n    // reset the smooth scroll behaviour\n    viewportContainerRef.current.style.scrollBehavior = \"smooth\";\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n\n    // calculate zoom value\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY * 10;\n    // set the zoom level\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM));\n\n    // set the focus point of zoom\n    // TODO: create figure out how to have it zoom according to the mouse pointing position\n    const viewportRect = viewportContainerRef.current.getBoundingClientRect();\n    setZoomPivot({\n      x: viewportRect.width / 2,\n      y: viewportRect.height / 2,\n    });\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n\n      const maxPos = {\n        x: 0,\n        y: 0,\n      };\n      const minPos = {\n        x: -(\n          viewportContainerRef.current.scrollWidth -\n          viewportContainerRef.current.clientWidth\n        ),\n        y: -(\n          viewportContainerRef.current.scrollHeight -\n          viewportContainerRef.current.clientHeight\n        ),\n      };\n\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: clamp(e.nativeEvent.pageX - dragOffset.x, minPos.x, maxPos.x),\n        y: clamp(e.nativeEvent.pageY - dragOffset.y, minPos.y, maxPos.y),\n      });\n    }\n  }\n\n  // move the viewport\n  if (viewportContainerRef.current) {\n    viewportContainerRef.current.scrollLeft = -viewportOffsetPos.x;\n    viewportContainerRef.current.scrollTop = -viewportOffsetPos.y;\n  }\n\n  // code for updating the viewport position when external code modify the scroll position\n  const scrollHandler = useCallback(\n    (e) => {\n      // setViewportOffsetPos({\n      //   x: -viewportContainerRef.current.scrollLeft,\n      //   y: -viewportContainerRef.current.scrollTop,\n      // });\n    },\n    [setViewportOffsetPos]\n  );\n  useEffect(() => {\n    viewportContainerRef.current.addEventListener(\"scroll\", scrollHandler);\n\n    //\n    return () => {\n      viewportContainerRef.current.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [viewportContainerRef, scrollHandler]);\n\n  return <canvas />;\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n"]},"metadata":{},"sourceType":"module"}