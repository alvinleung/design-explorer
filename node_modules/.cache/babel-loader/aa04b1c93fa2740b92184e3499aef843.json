{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = props.width;\n  const canvasHeight = props.height;\n  const canvasRef = useRef(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // canvas update\n\n    const update = () => {\n      // start rendering when the image is loaded\n      if (imageLoaded) {\n        // render cycle\n        // clear the canvas\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // render the content\n\n        repaintCanvas(ctx, imgList, props.cameraPosition, props.zoom);\n      }\n\n      requestAnimationFrame(update);\n    };\n\n    update();\n    return () => {};\n  }, [props.cameraPosition, props.zoom, imageLoaded]);\n  useEffect(() => {\n    // Load the svg files\n    let loadedImage = 0;\n    const imgList = props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          setImageLoaded(true);\n        }\n      });\n      return img;\n    });\n    return () => {};\n  }, [imageLoaded]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }\n  });\n}\n\nlet currentZoom = 0;\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n};\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","canvasWidth","width","canvasHeight","height","canvasRef","imageLoaded","setImageLoaded","canvas","current","ctx","getContext","update","clearRect","window","innerHeight","innerWidth","repaintCanvas","imgList","cameraPosition","zoom","requestAnimationFrame","loadedImage","src","map","imgUrl","img","Image","addEventListener","console","log","length","currentZoom","currentCameraPos","x","y","imgs","renderImages","fillText","paddingBetweenImages","currentDrawY","i","drawImage","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = props.width;\n  const canvasHeight = props.height;\n\n  const canvasRef = useRef(null);\n\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // canvas update\n    const update = () => {\n      // start rendering when the image is loaded\n      if (imageLoaded) {\n        // render cycle\n\n        // clear the canvas\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n        // render the content\n        repaintCanvas(ctx, imgList, props.cameraPosition, props.zoom);\n      }\n      requestAnimationFrame(update);\n    };\n\n    update();\n    return () => {};\n  }, [props.cameraPosition, props.zoom, imageLoaded]);\n\n  useEffect(() => {\n    // Load the svg files\n    let loadedImage = 0;\n    const imgList = props.src.map((imgUrl) => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          setImageLoaded(true);\n        }\n      });\n\n      return img;\n    });\n    return () => {};\n  }, [imageLoaded]);\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\nlet currentZoom = 0;\nlet currentCameraPos = { x: 0, y: 0 };\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}