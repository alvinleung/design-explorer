{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // purpose of this component\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE); // handling the position state\n\n  const zoomStep = 10;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cursorViewportPosition, setCursorViewportPosition] = useState({\n    x: 0,\n    y: 0\n  }); // grab the html reference of the container to get the beginning position\n\n  const viewportContainerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + zoomStep);\n    } else if (zooming === ZOOMMODE_OUT) {}\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true); // initialise drag offset value\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n\n    setViewportZoom(viewportZoom - e.nativeEvent.deltaY);\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: e.nativeEvent.pageX - dragOffset.x,\n        y: e.nativeEvent.pageY - dragOffset.y\n      });\n    }\n  } // https://stackoverflow.com/questions/5353254/javascript-onkeydown-event-fire-only-once\n\n\n  const handleKeyDown = useCallback(e => {\n    // when \"z key is down\n    if (e.which === 90 && !zooming) {\n      setZooming(ZOOMMODE_IN);\n      console.log(\"zoom start\");\n    }\n  });\n  const handleKeyUp = useCallback(e => {\n    // when \"z key is up\n    if (e.which === 90 && zooming) {\n      setZooming(ZOOMMODE_IDLE);\n    }\n\n    console.log(\"zoom off\");\n  });\n  const contentPosition = projectPoint({\n    x: viewportOffsetPos.x,\n    y: viewportOffsetPos.y,\n    z: viewportZoom\n  }, 500, {\n    x: 0,\n    y: 0\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-container\",\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    onClick: mouseClickHandler,\n    onWheel: mouseWheelHandler,\n    ref: viewportContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-content\",\n    style: {\n      transformOrigin: `${viewportOffsetPos.x}px ${viewportOffsetPos.y}px `,\n      transform: `perspective(500px) translate3d(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px, ${viewportZoom}px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, props.src.map((imgUrl, index) => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: index,\n      src: imgUrl,\n      alt: \"Design Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 18\n      }\n    });\n  })));\n}\n\nfunction projectPoint(point3d, perspective, trasnformOrigin) {\n  // The scaleProjected will store the scale of the element based on its distance from the 'camera'\n  const scaleProjected = perspective / (perspective + point3d.z);\n  const resultPoint = {\n    // The xProjected is the x position on the 2D world\n    x: point3d.x * scaleProjected + trasnformOrigin.x,\n    // The yProjected is the y position on the 2D world\n    y: point3d.y * scaleProjected + trasnformOrigin.y\n  };\n  return resultPoint;\n}\n\nexport default Viewport;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","dragging","setDragging","ZOOMMODE_IDLE","ZOOMMODE_IN","ZOOMMODE_OUT","zooming","setZooming","zoomStep","viewportZoom","setViewportZoom","viewportOffsetPos","setViewportOffsetPos","x","y","dragOffset","setDragOffset","cursorViewportPosition","setCursorViewportPosition","viewportContainerRef","mouseClickHandler","e","mouseDownHandler","stopPropagation","preventDefault","viewportElmPagePos","current","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","mouseUpHandler","mouseWheelHandler","deltaY","mouseMoveHandler","handleKeyDown","which","console","log","handleKeyUp","contentPosition","projectPoint","z","transformOrigin","transform","src","map","imgUrl","index","point3d","perspective","trasnformOrigin","scaleProjected","resultPoint"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// purpose of this component\n\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n  // handling the position state\n  const zoomStep = 10;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [cursorViewportPosition, setCursorViewportPosition] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  // grab the html reference of the container to get the beginning position\n  const viewportContainerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + zoomStep);\n    } else if (zooming === ZOOMMODE_OUT) {\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n\n    // initialise drag offset value\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y,\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n\n    setViewportZoom(viewportZoom - e.nativeEvent.deltaY);\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: e.nativeEvent.pageX - dragOffset.x,\n        y: e.nativeEvent.pageY - dragOffset.y,\n      });\n    }\n  }\n\n  // https://stackoverflow.com/questions/5353254/javascript-onkeydown-event-fire-only-once\n  const handleKeyDown = useCallback((e) => {\n    // when \"z key is down\n    if (e.which === 90 && !zooming) {\n      setZooming(ZOOMMODE_IN);\n      console.log(\"zoom start\");\n    }\n  });\n\n  const handleKeyUp = useCallback((e) => {\n    // when \"z key is up\n    if (e.which === 90 && zooming) {\n      setZooming(ZOOMMODE_IDLE);\n    }\n\n    console.log(\"zoom off\");\n  });\n\n  const contentPosition = projectPoint(\n    {\n      x: viewportOffsetPos.x,\n      y: viewportOffsetPos.y,\n      z: viewportZoom,\n    },\n    500,\n    {\n      x: 0,\n      y: 0,\n    }\n  );\n\n  return (\n    <div\n      className=\"viewport-container\"\n      onMouseDown={mouseDownHandler}\n      onMouseUp={mouseUpHandler}\n      onMouseMove={mouseMoveHandler}\n      onClick={mouseClickHandler}\n      onWheel={mouseWheelHandler}\n      ref={viewportContainerRef}\n    >\n      <div\n        className=\"viewport-content\"\n        style={{\n          transformOrigin: `${viewportOffsetPos.x}px ${viewportOffsetPos.y}px `,\n          transform: `perspective(500px) translate3d(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px, ${viewportZoom}px)`,\n        }}\n      >\n        {props.src.map((imgUrl, index) => {\n          return <img key={index} src={imgUrl} alt=\"Design Section\" />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction projectPoint(point3d, perspective, trasnformOrigin) {\n  // The scaleProjected will store the scale of the element based on its distance from the 'camera'\n  const scaleProjected = perspective / (perspective + point3d.z);\n\n  const resultPoint = {\n    // The xProjected is the x position on the 2D world\n    x: point3d.x * scaleProjected + trasnformOrigin.x,\n    // The yProjected is the y position on the 2D world\n    y: point3d.y * scaleProjected + trasnformOrigin.y,\n  };\n\n  return resultPoint;\n}\n\nexport default Viewport;\n"]},"metadata":{},"sourceType":"module"}