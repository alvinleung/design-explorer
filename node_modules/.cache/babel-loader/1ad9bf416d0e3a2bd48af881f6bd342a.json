{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport \"./Viewport.scss\";\nconst DEBUG_MODE = true; // global variables in this component\n\nlet cameraPosition = {\n  x: 0,\n  y: 0\n};\nlet zoom = 0;\nlet imageLoaded = false;\nlet viewportInitialized = false; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // Load the svg files\n\n    let loadedImage = 0;\n    const imgList = props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          imageLoaded = true;\n          console.log(\"All images loaded\");\n        }\n      });\n      return img;\n    }); // canvas update\n\n    const update = deltaTime => {\n      if (imageLoaded) {\n        // begin the renders\n        if (!viewportInitialized) {\n          initViewport(imgList);\n          viewportInitialized = true;\n        }\n\n        updateLogic(cameraPosition, zoom); // clear the canvas\n\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // render the content\n\n        repaintCanvas(canvas, ctx, imgList, cameraPosition, zoom);\n      }\n\n      requestAnimationFrame(update);\n    }; // begin the update cycle\n\n\n    update();\n  }, []); // the only way that the canvas code can access these var :(\n\n  cameraPosition = props.cameraPosition;\n  zoom = props.zoom;\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }\n  });\n}\n\nViewport.propTypes = {\n  mouseX: PropTypes.number,\n  mouseY: PropTypes.number,\n  zoom: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  src: PropTypes.arrayOf(PropTypes.imgs)\n}; // ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n// ZOOM\n\nlet currentZoom = 1;\nlet currentZoomChanges = 0; // basically velocity of zoom\n// CAMERA\n\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n};\nlet currentCameraVel = {\n  x: 0,\n  y: 0\n}; // IMAGE OPTIMISATION\n\nlet lowFidelityImges = []; // ===============================================================\n// begin main cycle\n// ===============================================================\n// INITIALIZATION\n\nfunction initViewport(imgs) {\n  lowFidelityImges = imgs.map(img => cacheLowfidelityRender(img, 0.5));\n} // UPDATE\n\n\nfunction updateLogic(targetCameraPosition, targetZoom) {\n  // update zoom\n  currentZoomChanges = (targetZoom - currentZoom) * 0.2; // add a little bit of trailing effect on the zoom\n\n  currentZoom += currentZoomChanges; // update camera pos\n\n  currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraPos.x += currentCameraVel.x;\n  currentCameraPos.y += currentCameraVel.y;\n}\n\nlet prevZoom = 0; // RENDER\n\nfunction repaintCanvas(canvas, ctx, imgs, cameraPosition, zoom) {\n  // prepare transformation for camera movement\n  ctx.save();\n  const offsetPos = {\n    x: currentCameraPos.x,\n    y: currentCameraPos.y\n  };\n  const zoomPivot = {\n    x: canvas.width / 2,\n    y: canvas.height / 2\n  }; // move camera\n\n  ctx.translate(zoomPivot.x, zoomPivot.y);\n  ctx.scale(currentZoom, currentZoom);\n  ctx.translate(offsetPos.x, offsetPos.y); // move everything to center\n  // zoom in a point using scale and translate\n  //https://stackoverflow.com/questions/2916081/zoom-in-on-a-point-using-scale-and-translate\n  // render images\n\n  renderImages(ctx, imgs, true); // reset transformation\n\n  ctx.restore(); // display the debug information and round to 2 deicmals\n\n  if (DEBUG_MODE) {\n    ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n    ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n    ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n  }\n} // ===============================================================\n// end of main cycle\n// ===============================================================\n// pre render a low fedelity version of the image when zoom to acheive the smooth animation\n\n\nfunction cacheLowfidelityRender(img, scaleFactor) {\n  const preRenderCanvas = document.createElement(\"canvas\");\n  preRenderCanvas.width = img.width * scaleFactor;\n  preRenderCanvas.height = img.height * scaleFactor;\n  preRenderCanvas.getContext(\"2d\").drawImage(img, 0, 0, preRenderCanvas.width, preRenderCanvas.height);\n  return preRenderCanvas;\n}\n\nfunction renderImages(ctx, imgs, lowQuality) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    if (lowQuality) {\n      ctx.drawImage(lowFidelityImges[i], 0, currentDrawY, imgs[i].width, imgs[i].height);\n    } else {\n      ctx.drawImage(imgs[i], 0, currentDrawY);\n    }\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","PropTypes","DEBUG_MODE","cameraPosition","x","y","zoom","imageLoaded","viewportInitialized","Viewport","props","canvasRef","canvas","current","ctx","getContext","loadedImage","imgList","src","map","imgUrl","img","Image","addEventListener","console","log","length","update","deltaTime","initViewport","updateLogic","clearRect","window","innerHeight","innerWidth","repaintCanvas","requestAnimationFrame","canvasWidth","canvasHeight","propTypes","mouseX","number","mouseY","width","height","arrayOf","imgs","currentZoom","currentZoomChanges","currentCameraPos","currentCameraVel","lowFidelityImges","cacheLowfidelityRender","targetCameraPosition","targetZoom","prevZoom","save","offsetPos","zoomPivot","translate","scale","renderImages","restore","fillText","toFixed","scaleFactor","preRenderCanvas","document","createElement","drawImage","lowQuality","paddingBetweenImages","currentDrawY","i","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport \"./Viewport.scss\";\n\nconst DEBUG_MODE = true;\n\n// global variables in this component\nlet cameraPosition = { x: 0, y: 0 };\nlet zoom = 0;\n\nlet imageLoaded = false;\nlet viewportInitialized = false;\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Load the svg files\n    let loadedImage = 0;\n    const imgList = props.src.map((imgUrl) => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          imageLoaded = true;\n          console.log(\"All images loaded\");\n        }\n      });\n\n      return img;\n    });\n\n    // canvas update\n    const update = (deltaTime) => {\n      if (imageLoaded) {\n        // begin the renders\n        if (!viewportInitialized) {\n          initViewport(imgList);\n          viewportInitialized = true;\n        }\n\n        updateLogic(cameraPosition, zoom);\n\n        // clear the canvas\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n        // render the content\n        repaintCanvas(canvas, ctx, imgList, cameraPosition, zoom);\n      }\n      requestAnimationFrame(update);\n    };\n\n    // begin the update cycle\n    update();\n  }, []);\n\n  // the only way that the canvas code can access these var :(\n  cameraPosition = props.cameraPosition;\n  zoom = props.zoom;\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\nViewport.propTypes = {\n  mouseX: PropTypes.number,\n  mouseY: PropTypes.number,\n  zoom: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  src: PropTypes.arrayOf(PropTypes.imgs),\n};\n\n// ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n\n// ZOOM\nlet currentZoom = 1;\nlet currentZoomChanges = 0; // basically velocity of zoom\n\n// CAMERA\nlet currentCameraPos = { x: 0, y: 0 };\nlet currentCameraVel = { x: 0, y: 0 };\n\n// IMAGE OPTIMISATION\nlet lowFidelityImges = [];\n\n// ===============================================================\n// begin main cycle\n// ===============================================================\n\n// INITIALIZATION\nfunction initViewport(imgs) {\n  lowFidelityImges = imgs.map((img) => cacheLowfidelityRender(img, 0.5));\n}\n\n// UPDATE\nfunction updateLogic(targetCameraPosition, targetZoom) {\n  // update zoom\n\n  currentZoomChanges = (targetZoom - currentZoom) * 0.2; // add a little bit of trailing effect on the zoom\n  currentZoom += currentZoomChanges;\n\n  // update camera pos\n  currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n  currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraPos.x += currentCameraVel.x;\n  currentCameraPos.y += currentCameraVel.y;\n}\n\nlet prevZoom = 0;\n// RENDER\nfunction repaintCanvas(canvas, ctx, imgs, cameraPosition, zoom) {\n  // prepare transformation for camera movement\n  ctx.save();\n\n  const offsetPos = {\n    x: currentCameraPos.x,\n    y: currentCameraPos.y,\n  };\n\n  const zoomPivot = {\n    x: canvas.width / 2,\n    y: canvas.height / 2,\n  };\n\n  // move camera\n  ctx.translate(zoomPivot.x, zoomPivot.y);\n  ctx.scale(currentZoom, currentZoom);\n  ctx.translate(offsetPos.x, offsetPos.y); // move everything to center\n  // zoom in a point using scale and translate\n  //https://stackoverflow.com/questions/2916081/zoom-in-on-a-point-using-scale-and-translate\n\n  // render images\n  renderImages(ctx, imgs, true);\n\n  // reset transformation\n  ctx.restore();\n\n  // display the debug information and round to 2 deicmals\n  if (DEBUG_MODE) {\n    ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n    ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n    ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n  }\n}\n// ===============================================================\n// end of main cycle\n// ===============================================================\n\n// pre render a low fedelity version of the image when zoom to acheive the smooth animation\nfunction cacheLowfidelityRender(img, scaleFactor) {\n  const preRenderCanvas = document.createElement(\"canvas\");\n  preRenderCanvas.width = img.width * scaleFactor;\n  preRenderCanvas.height = img.height * scaleFactor;\n\n  preRenderCanvas\n    .getContext(\"2d\")\n    .drawImage(img, 0, 0, preRenderCanvas.width, preRenderCanvas.height);\n\n  return preRenderCanvas;\n}\n\nfunction renderImages(ctx, imgs, lowQuality) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    if (lowQuality) {\n      ctx.drawImage(\n        lowFidelityImges[i],\n        0,\n        currentDrawY,\n        imgs[i].width,\n        imgs[i].height\n      );\n    } else {\n      ctx.drawImage(imgs[i], 0, currentDrawY);\n    }\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}