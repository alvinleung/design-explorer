{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // purpose of this component\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE); // handling the position state\n\n  const zoomStep = 0.2;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // grab the html reference of the container to get the beginning position\n\n  const viewportContainerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + zoomStep);\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true); // initialise drag offset value\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n\n    setViewportOffsetPos({\n      x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n      y: viewportOffsetPos.y - e.nativeEvent.deltaY\n    });\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: e.nativeEvent.pageX - dragOffset.x,\n        y: e.nativeEvent.pageY - dragOffset.y\n      });\n    }\n  } // https://stackoverflow.com/questions/5353254/javascript-onkeydown-event-fire-only-once\n\n\n  const handleKeyDown = useCallback(e => {\n    // when \"z key is down\n    if (e.which === 90 && !zooming) {\n      setZooming(true);\n      console.log(\"zoom start\");\n    }\n  });\n  const handleKeyUp = useCallback(e => {\n    // when \"z key is up\n    if (e.which === 90 && zooming) {\n      setZooming(false);\n    }\n\n    console.log(\"zoom off\");\n  });\n  useEffect(() => {\n    document.body.addEventListener(\"keydown\", handleKeyDown);\n    document.body.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.body.removeEventListener(\"keydown\", handleKeyDown);\n      document.body.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, [handleKeyDown, handleKeyUp]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-container\",\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    onClick: mouseClickHandler,\n    onWheel: mouseWheelHandler,\n    ref: viewportContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-content\",\n    style: {\n      transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px) scale(${viewportZoom})`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, props.src.map((imgUrl, index) => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: index,\n      src: imgUrl,\n      alt: \"Design Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 18\n      }\n    });\n  })));\n}\n\nexport default Viewport;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","dragging","setDragging","ZOOMMODE_IDLE","ZOOMMODE_IN","ZOOMMODE_OUT","zooming","setZooming","zoomStep","viewportZoom","setViewportZoom","viewportOffsetPos","setViewportOffsetPos","x","y","dragOffset","setDragOffset","viewportContainerRef","mouseClickHandler","e","mouseDownHandler","stopPropagation","preventDefault","viewportElmPagePos","current","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","mouseUpHandler","mouseWheelHandler","deltaX","deltaY","mouseMoveHandler","handleKeyDown","which","console","log","handleKeyUp","document","body","addEventListener","removeEventListener","transform","src","map","imgUrl","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// purpose of this component\n\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n  // handling the position state\n  const zoomStep = 0.2;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // grab the html reference of the container to get the beginning position\n  const viewportContainerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + zoomStep);\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n\n    // initialise drag offset value\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y,\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    setViewportOffsetPos({\n      x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n      y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    });\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: e.nativeEvent.pageX - dragOffset.x,\n        y: e.nativeEvent.pageY - dragOffset.y,\n      });\n    }\n  }\n\n  // https://stackoverflow.com/questions/5353254/javascript-onkeydown-event-fire-only-once\n  const handleKeyDown = useCallback((e) => {\n    // when \"z key is down\n    if (e.which === 90 && !zooming) {\n      setZooming(true);\n      console.log(\"zoom start\");\n    }\n  });\n\n  const handleKeyUp = useCallback((e) => {\n    // when \"z key is up\n    if (e.which === 90 && zooming) {\n      setZooming(false);\n    }\n\n    console.log(\"zoom off\");\n  });\n\n  useEffect(() => {\n    document.body.addEventListener(\"keydown\", handleKeyDown);\n    document.body.addEventListener(\"keyup\", handleKeyUp);\n\n    return () => {\n      document.body.removeEventListener(\"keydown\", handleKeyDown);\n      document.body.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, [handleKeyDown, handleKeyUp]);\n\n  return (\n    <div\n      className=\"viewport-container\"\n      onMouseDown={mouseDownHandler}\n      onMouseUp={mouseUpHandler}\n      onMouseMove={mouseMoveHandler}\n      onClick={mouseClickHandler}\n      onWheel={mouseWheelHandler}\n      ref={viewportContainerRef}\n    >\n      <div\n        className=\"viewport-content\"\n        style={{\n          transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px) scale(${viewportZoom})`,\n        }}\n      >\n        {props.src.map((imgUrl, index) => {\n          return <img key={index} src={imgUrl} alt=\"Design Section\" />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Viewport;\n"]},"metadata":{},"sourceType":"module"}