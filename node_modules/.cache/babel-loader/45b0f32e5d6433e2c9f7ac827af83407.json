{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\nconst DEBUG_MODE = true; // global variables in this component\n\nlet cameraPosition = {\n  x: 0,\n  y: 0\n};\nlet zoom = 0;\nlet imageLoaded = false;\nlet viewportInitialized = false; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // Load the svg files\n\n    let loadedImage = 0;\n    const imgList = props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          imageLoaded = true;\n          console.log(\"All images loaded\");\n        }\n      });\n      return img;\n    }); // canvas update\n\n    const update = deltaTime => {\n      if (imageLoaded) {\n        // begin the renders\n        if (!viewportInitialized) {\n          initViewport(imgList);\n          viewportInitialized = true;\n        }\n\n        updateLogic(cameraPosition, zoom); // clear the canvas\n\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // render the content\n\n        repaintCanvas(canvas, ctx, imgList, cameraPosition, zoom);\n      }\n\n      requestAnimationFrame(update);\n    }; // begin the update cycle\n\n\n    update();\n  }, []); // the only way that the canvas code can access these var :(\n\n  cameraPosition = props.cameraPosition;\n  zoom = props.zoom;\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  });\n} // ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n// ZOOM\n\n\nlet currentZoom = 1;\nlet currentZoomChanges = 0; // basically velocity of zoom\n// CAMERA\n\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n};\nlet currentCameraVel = {\n  x: 0,\n  y: 0\n}; // IMAGE OPTIMISATION\n\nlet lowFidelityImges = []; // ===============================================================\n// begin main cycle\n// ===============================================================\n// INITIALIZATION\n\nfunction initViewport(imgs) {\n  lowFidelityImges = imgs.map(img => cacheLowfidelityRender(img, 0.5));\n} // UPDATE\n\n\nfunction updateLogic(targetCameraPosition, targetZoom) {\n  // update zoom\n  currentZoomChanges = (targetZoom - currentZoom) * 0.2; // add a little bit of trailing effect on the zoom\n\n  currentZoom += currentZoomChanges; // update camera pos\n\n  currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraPos.x += currentCameraVel.x;\n  currentCameraPos.y += currentCameraVel.y;\n} // RENDER\n\n\nfunction repaintCanvas(canvas, ctx, imgs, cameraPosition, zoom) {\n  // prepare transformation for camera movement\n  ctx.save();\n  const offsetPos = {\n    x: currentCameraPos.x / currentZoom,\n    y: currentCameraPos.y / currentZoom\n  };\n  const zoomPivot = {\n    x: canvas.width / 2,\n    y: canvas.height / 2\n  }; // move camera\n\n  ctx.scale(currentZoom, currentZoom);\n  ctx.translate(-zoomPivot.x, -zoomPivot.y);\n  ctx.translate(offsetPos.x, offsetPos.y); // move everything to center\n  // zoom in a point using scale and translate\n  //https://stackoverflow.com/questions/2916081/zoom-in-on-a-point-using-scale-and-translate\n  // render images\n\n  renderImages(ctx, imgs, true); // reset transformation\n\n  ctx.restore(); // display the debug information and round to 2 deicmals\n\n  if (DEBUG_MODE) {\n    ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n    ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n    ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n  }\n} // ===============================================================\n// end of main cycle\n// ===============================================================\n// pre render a low fedelity version of the image when zoom to acheive the smooth animation\n\n\nfunction cacheLowfidelityRender(img, scaleFactor) {\n  const preRenderCanvas = document.createElement(\"canvas\");\n  preRenderCanvas.width = img.width * scaleFactor;\n  preRenderCanvas.height = img.height * scaleFactor;\n  preRenderCanvas.getContext(\"2d\").drawImage(img, 0, 0, preRenderCanvas.width, preRenderCanvas.height);\n  return preRenderCanvas;\n}\n\nfunction renderImages(ctx, imgs, lowQuality) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    if (lowQuality) {\n      ctx.drawImage(lowFidelityImges[i], 0, currentDrawY, imgs[i].width, imgs[i].height);\n    } else {\n      ctx.drawImage(imgs[i], 0, currentDrawY);\n    }\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","DEBUG_MODE","cameraPosition","x","y","zoom","imageLoaded","viewportInitialized","Viewport","props","canvasWidth","canvasHeight","canvasRef","canvas","current","ctx","getContext","loadedImage","imgList","src","map","imgUrl","img","Image","addEventListener","console","log","length","update","deltaTime","initViewport","updateLogic","clearRect","window","innerHeight","innerWidth","repaintCanvas","requestAnimationFrame","currentZoom","currentZoomChanges","currentCameraPos","currentCameraVel","lowFidelityImges","imgs","cacheLowfidelityRender","targetCameraPosition","targetZoom","save","offsetPos","zoomPivot","width","height","scale","translate","renderImages","restore","fillText","toFixed","scaleFactor","preRenderCanvas","document","createElement","drawImage","lowQuality","paddingBetweenImages","currentDrawY","i","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\nconst DEBUG_MODE = true;\n\n// global variables in this component\nlet cameraPosition = { x: 0, y: 0 };\nlet zoom = 0;\n\nlet imageLoaded = false;\nlet viewportInitialized = false;\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Load the svg files\n    let loadedImage = 0;\n    const imgList = props.src.map((imgUrl) => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          imageLoaded = true;\n          console.log(\"All images loaded\");\n        }\n      });\n\n      return img;\n    });\n\n    // canvas update\n    const update = (deltaTime) => {\n      if (imageLoaded) {\n        // begin the renders\n        if (!viewportInitialized) {\n          initViewport(imgList);\n          viewportInitialized = true;\n        }\n\n        updateLogic(cameraPosition, zoom);\n\n        // clear the canvas\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n        // render the content\n        repaintCanvas(canvas, ctx, imgList, cameraPosition, zoom);\n      }\n      requestAnimationFrame(update);\n    };\n\n    // begin the update cycle\n    update();\n  }, []);\n\n  // the only way that the canvas code can access these var :(\n  cameraPosition = props.cameraPosition;\n  zoom = props.zoom;\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\n// ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n\n// ZOOM\nlet currentZoom = 1;\nlet currentZoomChanges = 0; // basically velocity of zoom\n\n// CAMERA\nlet currentCameraPos = { x: 0, y: 0 };\nlet currentCameraVel = { x: 0, y: 0 };\n\n// IMAGE OPTIMISATION\nlet lowFidelityImges = [];\n\n// ===============================================================\n// begin main cycle\n// ===============================================================\n\n// INITIALIZATION\nfunction initViewport(imgs) {\n  lowFidelityImges = imgs.map((img) => cacheLowfidelityRender(img, 0.5));\n}\n\n// UPDATE\nfunction updateLogic(targetCameraPosition, targetZoom) {\n  // update zoom\n\n  currentZoomChanges = (targetZoom - currentZoom) * 0.2; // add a little bit of trailing effect on the zoom\n  currentZoom += currentZoomChanges;\n\n  // update camera pos\n  currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n  currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraPos.x += currentCameraVel.x;\n  currentCameraPos.y += currentCameraVel.y;\n}\n\n// RENDER\nfunction repaintCanvas(canvas, ctx, imgs, cameraPosition, zoom) {\n  // prepare transformation for camera movement\n  ctx.save();\n\n  const offsetPos = {\n    x: currentCameraPos.x / currentZoom,\n    y: currentCameraPos.y / currentZoom,\n  };\n\n  const zoomPivot = {\n    x: canvas.width / 2,\n    y: canvas.height / 2,\n  };\n\n  // move camera\n\n  ctx.scale(currentZoom, currentZoom);\n  ctx.translate(-zoomPivot.x, -zoomPivot.y);\n  ctx.translate(offsetPos.x, offsetPos.y); // move everything to center\n  // zoom in a point using scale and translate\n  //https://stackoverflow.com/questions/2916081/zoom-in-on-a-point-using-scale-and-translate\n\n  // render images\n  renderImages(ctx, imgs, true);\n\n  // reset transformation\n  ctx.restore();\n\n  // display the debug information and round to 2 deicmals\n  if (DEBUG_MODE) {\n    ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n    ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n    ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n  }\n}\n// ===============================================================\n// end of main cycle\n// ===============================================================\n\n// pre render a low fedelity version of the image when zoom to acheive the smooth animation\nfunction cacheLowfidelityRender(img, scaleFactor) {\n  const preRenderCanvas = document.createElement(\"canvas\");\n  preRenderCanvas.width = img.width * scaleFactor;\n  preRenderCanvas.height = img.height * scaleFactor;\n\n  preRenderCanvas\n    .getContext(\"2d\")\n    .drawImage(img, 0, 0, preRenderCanvas.width, preRenderCanvas.height);\n\n  return preRenderCanvas;\n}\n\nfunction renderImages(ctx, imgs, lowQuality) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    if (lowQuality) {\n      ctx.drawImage(\n        lowFidelityImges[i],\n        0,\n        currentDrawY,\n        imgs[i].width,\n        imgs[i].height\n      );\n    } else {\n      ctx.drawImage(imgs[i], 0, currentDrawY);\n    }\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}