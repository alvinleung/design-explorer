{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n  const canvasRef = useRef(null);\n  const [imgLoaded, setImageLoaded] = useState(false);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // Load the svg files\n\n    let loadedImage = 0;\n    const imgList = props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          setImageLoaded(true);\n        }\n      });\n      return img;\n    }); // canvas update\n\n    const update = deltaTime => {\n      // clear the canvas\n      ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // render the content\n\n      repaintCanvas(ctx, imgList, props.cameraPosition, props.zoom);\n      requestAnimationFrame(update);\n    }; // begin the update cycle\n\n\n    update();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }\n  });\n} // ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n\n\nlet currentZoom = 0;\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n};\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","canvasWidth","canvasHeight","canvasRef","imgLoaded","setImageLoaded","canvas","current","ctx","getContext","loadedImage","imgList","src","map","imgUrl","img","Image","addEventListener","console","log","length","update","deltaTime","clearRect","window","innerHeight","innerWidth","repaintCanvas","cameraPosition","zoom","requestAnimationFrame","currentZoom","currentCameraPos","x","y","imgs","renderImages","fillText","paddingBetweenImages","currentDrawY","i","drawImage","height","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n\n  const canvasRef = useRef(null);\n\n  const [imgLoaded, setImageLoaded] = useState(false);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Load the svg files\n    let loadedImage = 0;\n    const imgList = props.src.map((imgUrl) => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          setImageLoaded(true);\n        }\n      });\n\n      return img;\n    });\n\n    // canvas update\n    const update = (deltaTime) => {\n      // clear the canvas\n      ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n      // render the content\n      repaintCanvas(ctx, imgList, props.cameraPosition, props.zoom);\n      requestAnimationFrame(update);\n    };\n\n    // begin the update cycle\n    update();\n  }, []);\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\n// ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n\nlet currentZoom = 0;\nlet currentCameraPos = { x: 0, y: 0 };\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  renderImages(ctx, imgs);\n  ctx.fillText(\"camera x - \" + cameraPosition.x, 10, 50);\n  ctx.fillText(\"camera y - \" + cameraPosition.y, 10, 65);\n}\n\nfunction renderImages(ctx, imgs) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    ctx.drawImage(imgs[i], 0, currentDrawY);\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}