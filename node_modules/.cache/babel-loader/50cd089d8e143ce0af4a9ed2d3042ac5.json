{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef } from \"react\";\nimport \"./Viewport.scss\"; // purpose of this component\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false); // managing zoom\n\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n  const zoomStep = 10;\n  const [viewportZoom, setViewportZoom] = useState(1); // the screen coordinate of the zoom point\n\n  const [zoomPivot, setZoomPivot] = useState({\n    x: 0,\n    y: 0\n  }); // handling the position panning state\n\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // grab the html reference of the container to get the beginning position\n\n  const viewportContainerRef = useRef(null);\n  const viewportPannerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + zoomStep);\n    } else if (zooming === ZOOMMODE_OUT) {}\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true); // initialise drag offset value\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n\n    setViewportOffsetPos({\n      x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n      y: viewportOffsetPos.y - e.nativeEvent.deltaY\n    }); // calculate zoom value\n\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY * 10; // set the focus point of zoom\n    // TODO: create figure out how to have it zoom according to the mouse pointing position\n\n    const viewportRect = viewportContainerRef.current.getBoundingClientRect();\n    setZoomPivot({\n      x: viewportRect.width / 2,\n      y: viewportRect.height / 2\n    }); // set the zoom level\n\n    setViewportZoom(newZoomValue);\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n      // setViewportOffsetPos({\n      //   // for some reason react glitches when we use offsetX\n      //   x: e.nativeEvent.pageX - dragOffset.x,\n      //   y: e.nativeEvent.pageY - dragOffset.y,\n      // });\n      console.log(viewportPannerRef.current);\n      viewportContainerRef.current.scrollLeft = 100;\n      viewportContainerRef.current.scrollTop = 100;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-container\",\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    onClick: mouseClickHandler,\n    onWheel: mouseWheelHandler,\n    ref: viewportContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-content\",\n    style: {\n      transformOrigin: `${-viewportOffsetPos.x + zoomPivot.x}px ${-viewportOffsetPos.y + zoomPivot.y}px `,\n      transform: `perspective(500px) translate3d(0,0, ${viewportZoom}px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, props.src.map((imgUrl, index) => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: index,\n      src: imgUrl,\n      alt: \"Design Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 20\n      }\n    });\n  }))));\n}\n\nexport default Viewport;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","Viewport","props","dragging","setDragging","ZOOMMODE_IDLE","ZOOMMODE_IN","ZOOMMODE_OUT","zooming","setZooming","zoomStep","viewportZoom","setViewportZoom","zoomPivot","setZoomPivot","x","y","viewportOffsetPos","setViewportOffsetPos","dragOffset","setDragOffset","viewportContainerRef","viewportPannerRef","mouseClickHandler","e","mouseDownHandler","stopPropagation","preventDefault","viewportElmPagePos","current","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","mouseUpHandler","mouseWheelHandler","deltaX","deltaY","newZoomValue","viewportRect","width","height","mouseMoveHandler","console","log","scrollLeft","scrollTop","transform","transformOrigin","src","map","imgUrl","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./Viewport.scss\";\n\n// purpose of this component\n\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  // mode toggles for the components\n  const [dragging, setDragging] = useState(false);\n\n  // managing zoom\n  const ZOOMMODE_IDLE = 0;\n  const ZOOMMODE_IN = 1;\n  const ZOOMMODE_OUT = 2;\n\n  const [zooming, setZooming] = useState(ZOOMMODE_IDLE);\n  const zoomStep = 10;\n  const [viewportZoom, setViewportZoom] = useState(1);\n  // the screen coordinate of the zoom point\n  const [zoomPivot, setZoomPivot] = useState({ x: 0, y: 0 });\n\n  // handling the position panning state\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // grab the html reference of the container to get the beginning position\n  const viewportContainerRef = useRef(null);\n  const viewportPannerRef = useRef(null);\n\n  function mouseClickHandler(e) {\n    if (zooming === ZOOMMODE_IN) {\n      setViewportZoom(viewportZoom + zoomStep);\n    } else if (zooming === ZOOMMODE_OUT) {\n    }\n  }\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n\n    // initialise drag offset value\n    const viewportElmPagePos = {\n      x: viewportContainerRef.current.getBoundingClientRect().left,\n      y: viewportContainerRef.current.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x - viewportOffsetPos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y - viewportOffsetPos.y,\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    setViewportOffsetPos({\n      x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n      y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    });\n\n    // calculate zoom value\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY * 10;\n\n    // set the focus point of zoom\n    // TODO: create figure out how to have it zoom according to the mouse pointing position\n    const viewportRect = viewportContainerRef.current.getBoundingClientRect();\n    setZoomPivot({\n      x: viewportRect.width / 2,\n      y: viewportRect.height / 2,\n    });\n\n    // set the zoom level\n    setViewportZoom(newZoomValue);\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n\n      // setViewportOffsetPos({\n      //   // for some reason react glitches when we use offsetX\n      //   x: e.nativeEvent.pageX - dragOffset.x,\n      //   y: e.nativeEvent.pageY - dragOffset.y,\n      // });\n      console.log(viewportPannerRef.current);\n      viewportContainerRef.current.scrollLeft = 100;\n      viewportContainerRef.current.scrollTop = 100;\n    }\n  }\n\n  return (\n    <div\n      className=\"viewport-container\"\n      onMouseDown={mouseDownHandler}\n      onMouseUp={mouseUpHandler}\n      onMouseMove={mouseMoveHandler}\n      onClick={mouseClickHandler}\n      onWheel={mouseWheelHandler}\n      ref={viewportContainerRef}\n    >\n      {/* outer div control the panning */}\n      <div\n        style={{\n          transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px)`,\n        }}\n      >\n        {/* inner div control the zooming */}\n        <div\n          className=\"viewport-content\"\n          style={{\n            transformOrigin: `${-viewportOffsetPos.x + zoomPivot.x}px ${\n              -viewportOffsetPos.y + zoomPivot.y\n            }px `,\n            transform: `perspective(500px) translate3d(0,0, ${viewportZoom}px)`,\n          }}\n        >\n          {props.src.map((imgUrl, index) => {\n            return <img key={index} src={imgUrl} alt=\"Design Section\" />;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Viewport;\n"]},"metadata":{},"sourceType":"module"}