{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n  const canvasRef = useRef(null);\n  const [imgLoaded, setImageLoaded] = useState(false);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // clear everything on the canvas\n\n    ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // ctx.fillStyle = \"#FF0000\";\n\n    ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n    ctx.translate(10, 10); // render svg file on canvas\n\n    let loadedImage = 0;\n    const imgList = props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          setImageLoaded(true);\n        }\n      });\n    });\n\n    const update = () => {\n      // start rendering when the image is loaded\n      if (imgLoaded) repaintCanvas(ctx, imgList, {\n        x: props.cameraX,\n        y: props.cameraY\n      }, props.zoom);\n      requestAnimationFrame(update);\n    };\n\n    update();\n  });\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 10\n    }\n  });\n}\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  for (let i = 0; i < imgs.length; i++) {// render all the images\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","Viewport","props","canvasWidth","canvasHeight","canvasRef","imgLoaded","setImageLoaded","canvas","current","ctx","getContext","clearRect","window","innerHeight","innerWidth","fillRect","translate","loadedImage","imgList","src","map","imgUrl","img","Image","addEventListener","console","log","length","update","repaintCanvas","x","cameraX","y","cameraY","zoom","requestAnimationFrame","imgs","cameraPosition","i","clamp","value","min","max"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,OAAO,iBAAP,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAMC,WAAW,GAAG,IAApB;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAMC,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACQ,SAAD,EAAYC,cAAZ,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMS,MAAM,GAAGH,SAAS,CAACI,OAAzB;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ,CAHc,CAKd;;AACAD,IAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBC,MAAM,CAACC,WAA3B,EAAwCD,MAAM,CAACE,UAA/C,EANc,CAQd;;AACAL,IAAAA,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBH,MAAM,CAACE,UAA1B,EAAsCF,MAAM,CAACC,WAA7C;AAEAJ,IAAAA,GAAG,CAACO,SAAJ,CAAc,EAAd,EAAkB,EAAlB,EAXc,CAad;;AAEA,QAAIC,WAAW,GAAG,CAAlB;AACA,UAAMC,OAAO,GAAGjB,KAAK,CAACkB,GAAN,CAAUC,GAAV,CAAeC,MAAD,IAAY;AACxC,YAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACH,GAAJ,GAAUE,MAAV;AACAC,MAAAA,GAAG,CAACE,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BL,MAAxC;AACAJ,QAAAA,WAAW;;AAEX,YAAIA,WAAW,KAAKC,OAAO,CAACS,MAA5B,EAAoC;AAClC;AACArB,UAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,OARD;AASD,KAZe,CAAhB;;AAcA,UAAMsB,MAAM,GAAG,MAAM;AACnB;AACA,UAAIvB,SAAJ,EACEwB,aAAa,CACXpB,GADW,EAEXS,OAFW,EAGX;AAAEY,QAAAA,CAAC,EAAE7B,KAAK,CAAC8B,OAAX;AAAoBC,QAAAA,CAAC,EAAE/B,KAAK,CAACgC;AAA7B,OAHW,EAIXhC,KAAK,CAACiC,IAJK,CAAb;AAMFC,MAAAA,qBAAqB,CAACP,MAAD,CAArB;AACD,KAVD;;AAYAA,IAAAA,MAAM;AACP,GA3CQ,CAAT;AA6CA,sBAAO;AAAQ,IAAA,GAAG,EAAExB,SAAb;AAAwB,IAAA,KAAK,EAAEF,WAA/B;AAA4C,IAAA,MAAM,EAAEC,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,SAAS0B,aAAT,CAAuBpB,GAAvB,EAA4B2B,IAA5B,EAAkCC,cAAlC,EAAkDH,IAAlD,EAAwD;AACtD,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACT,MAAzB,EAAiCW,CAAC,EAAlC,EAAsC,CACpC;AACD;AACF;;AAED,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAIF,KAAK,GAAGC,GAAZ,EAAiB,OAAOA,GAAP;AACjB,MAAID,KAAK,GAAGE,GAAZ,EAAiB,OAAOA,GAAP;AACjB,SAAOF,KAAP;AACD;;AAED,eAAexC,QAAf,C,CAEA;AAEA;AACA;AAEA;AACA","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n\n  const canvasRef = useRef(null);\n\n  const [imgLoaded, setImageLoaded] = useState(false);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // clear everything on the canvas\n    ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n\n    // ctx.fillStyle = \"#FF0000\";\n    ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n\n    ctx.translate(10, 10);\n\n    // render svg file on canvas\n\n    let loadedImage = 0;\n    const imgList = props.src.map((imgUrl) => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          setImageLoaded(true);\n        }\n      });\n    });\n\n    const update = () => {\n      // start rendering when the image is loaded\n      if (imgLoaded)\n        repaintCanvas(\n          ctx,\n          imgList,\n          { x: props.cameraX, y: props.cameraY },\n          props.zoom\n        );\n      requestAnimationFrame(update);\n    };\n\n    update();\n  });\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}