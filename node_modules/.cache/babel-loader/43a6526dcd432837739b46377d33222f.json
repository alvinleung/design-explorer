{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef } from \"react\";\nimport \"./Viewport.scss\"; // purpose of this component\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  const [dragging, setDragging] = useState(false);\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // grab the html reference of the container to get the beginning position\n\n  const viewportContainerRef = useRef(null);\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true);\n    console.log(viewportContainerRef); // initialise drag offset value\n\n    const viewportElmPagePos = {\n      x: viewportContainerRef.getBoundingClientRect().left,\n      y: viewportContainerRef.getBoundingClientRect().top\n    };\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: e.nativeEvent.pageX,\n        y: e.nativeEvent.pageY\n      });\n      console.log(viewportOffsetPos.x);\n    }\n  }\n\n  console.log(\"update\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-container\",\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    ref: viewportContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewport-content\",\n    style: {\n      transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, props.src.map((imgUrl, index) => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: index,\n      src: imgUrl,\n      alt: \"Design Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 18\n      }\n    });\n  })));\n}\n\nexport default Viewport;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","Viewport","props","dragging","setDragging","viewportOffsetPos","setViewportOffsetPos","x","y","dragOffset","setDragOffset","viewportContainerRef","mouseDownHandler","e","stopPropagation","preventDefault","console","log","viewportElmPagePos","getBoundingClientRect","left","top","nativeEvent","pageX","pageY","mouseUpHandler","mouseMoveHandler","transform","src","map","imgUrl","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,iBAAP,C,CAEA;AAEA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAAC;AAAEQ,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAA1D;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC;AAAEQ,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAA5C,CAHuB,CAKvB;;AACA,QAAMG,oBAAoB,GAAGX,MAAM,CAAC,IAAD,CAAnC;;AAEA,WAASY,gBAAT,CAA0BC,CAA1B,EAA6B;AAC3B;AACAA,IAAAA,CAAC,CAACC,eAAF;AACAD,IAAAA,CAAC,CAACE,cAAF,GAH2B,CAK3B;;AACAX,IAAAA,WAAW,CAAC,IAAD,CAAX;AAEAY,IAAAA,OAAO,CAACC,GAAR,CAAYN,oBAAZ,EAR2B,CAU3B;;AACA,UAAMO,kBAAkB,GAAG;AACzBX,MAAAA,CAAC,EAAEI,oBAAoB,CAACQ,qBAArB,GAA6CC,IADvB;AAEzBZ,MAAAA,CAAC,EAAEG,oBAAoB,CAACQ,qBAArB,GAA6CE;AAFvB,KAA3B;AAKAX,IAAAA,aAAa,CAAC;AACZH,MAAAA,CAAC,EAAEM,CAAC,CAACS,WAAF,CAAcC,KAAd,GAAsBL,kBAAkB,CAACX,CADhC;AAEZC,MAAAA,CAAC,EAAEK,CAAC,CAACS,WAAF,CAAcE,KAAd,GAAsBN,kBAAkB,CAACV;AAFhC,KAAD,CAAb;AAID;;AAED,WAASiB,cAAT,CAAwBZ,CAAxB,EAA2B;AACzB;AACAT,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,WAASsB,gBAAT,CAA0Bb,CAA1B,EAA6B;AAC3B,QAAIV,QAAJ,EAAc;AACZ;AACA;AAEAG,MAAAA,oBAAoB,CAAC;AACnB;AACAC,QAAAA,CAAC,EAAEM,CAAC,CAACS,WAAF,CAAcC,KAFE;AAGnBf,QAAAA,CAAC,EAAEK,CAAC,CAACS,WAAF,CAAcE;AAHE,OAAD,CAApB;AAKAR,MAAAA,OAAO,CAACC,GAAR,CAAYZ,iBAAiB,CAACE,CAA9B;AACD;AACF;;AAEDS,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEA,sBACE;AACE,IAAA,SAAS,EAAC,oBADZ;AAEE,IAAA,WAAW,EAAEL,gBAFf;AAGE,IAAA,SAAS,EAAEa,cAHb;AAIE,IAAA,WAAW,EAAEC,gBAJf;AAKE,IAAA,GAAG,EAAEf,oBALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,SAAS,EAAC,kBADZ;AAEE,IAAA,KAAK,EAAE;AACLgB,MAAAA,SAAS,EAAG,aAAYtB,iBAAiB,CAACE,CAAE,OAAMF,iBAAiB,CAACG,CAAE;AADjE,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGN,KAAK,CAAC0B,GAAN,CAAUC,GAAV,CAAc,CAACC,MAAD,EAASC,KAAT,KAAmB;AAChC,wBAAO;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,GAAG,EAAED,MAAtB;AAA8B,MAAA,GAAG,EAAC,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CANH,CAPF,CADF;AAoBD;;AAED,eAAe7B,QAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./Viewport.scss\";\n\n// purpose of this component\n\n// Referenced tutorial\n// https://stackoverflow.com/questions/20926551/recommended-way-of-making-react-component-div-draggable\n\nfunction Viewport(props) {\n  const [dragging, setDragging] = useState(false);\n  const [viewportOffsetPos, setViewportOffsetPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // grab the html reference of the container to get the beginning position\n  const viewportContainerRef = useRef(null);\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n\n    console.log(viewportContainerRef);\n\n    // initialise drag offset value\n    const viewportElmPagePos = {\n      x: viewportContainerRef.getBoundingClientRect().left,\n      y: viewportContainerRef.getBoundingClientRect().top,\n    };\n\n    setDragOffset({\n      x: e.nativeEvent.pageX - viewportElmPagePos.x,\n      y: e.nativeEvent.pageY - viewportElmPagePos.y,\n    });\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n      // more about clientX/pageX/screenX\n      // https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y/9335517\n\n      setViewportOffsetPos({\n        // for some reason react glitches when we use offsetX\n        x: e.nativeEvent.pageX,\n        y: e.nativeEvent.pageY,\n      });\n      console.log(viewportOffsetPos.x);\n    }\n  }\n\n  console.log(\"update\");\n\n  return (\n    <div\n      className=\"viewport-container\"\n      onMouseDown={mouseDownHandler}\n      onMouseUp={mouseUpHandler}\n      onMouseMove={mouseMoveHandler}\n      ref={viewportContainerRef}\n    >\n      <div\n        className=\"viewport-content\"\n        style={{\n          transform: `translate(${viewportOffsetPos.x}px, ${viewportOffsetPos.y}px)`,\n        }}\n      >\n        {props.src.map((imgUrl, index) => {\n          return <img key={index} src={imgUrl} alt=\"Design Section\" />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Viewport;\n"]},"metadata":{},"sourceType":"module"}