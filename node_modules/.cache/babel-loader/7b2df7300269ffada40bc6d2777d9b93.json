{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/designExplorer.js\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport Viewport from \"./viewport\"; // utility function for min-maxing\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nfunction DesignExplorer() {\n  const imgList = [`${process.env.PUBLIC_URL}/img/8 Viewing your tasks.svg`, `${process.env.PUBLIC_URL}/img/9 Contacting a client.svg`, `${process.env.PUBLIC_URL}/img/10 Contacting a helper.svg`]; // static parameters\n\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 100;\n  const MIN_ZOOM = -400; // for controlling the viewports\n\n  const [dragging, setDragging] = useState(false);\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewportCamearPos, setViewportCamearPos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault(); // enter dragging mode\n\n    setDragging(true);\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault(); // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n    // calculate zoom value\n\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY; // set the zoom level\n\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM));\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {}\n  }\n\n  return /*#__PURE__*/React.createElement(Viewport, {\n    onMouseDown: mouseDownHandler,\n    onMouseUp: mouseUpHandler,\n    onMouseMove: mouseMoveHandler,\n    camearPosition: viewportCamearPos,\n    zoom: viewportZoom,\n    src: imgList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default DesignExplorer;","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/designExplorer.js"],"names":["React","useState","Viewport","clamp","value","min","max","DesignExplorer","imgList","process","env","PUBLIC_URL","ZOOM_STEP","MAX_ZOOM","MIN_ZOOM","dragging","setDragging","viewportZoom","setViewportZoom","viewportCamearPos","setViewportCamearPos","x","y","mouseDownHandler","e","stopPropagation","preventDefault","mouseUpHandler","mouseWheelHandler","nativeEvent","newZoomValue","deltaY","mouseMoveHandler"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAIF,KAAK,GAAGC,GAAZ,EAAiB,OAAOA,GAAP;AACjB,MAAID,KAAK,GAAGE,GAAZ,EAAiB,OAAOA,GAAP;AACjB,SAAOF,KAAP;AACD;;AAED,SAASG,cAAT,GAA0B;AACxB,QAAMC,OAAO,GAAG,CACb,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,+BADZ,EAEb,GAAEF,OAAO,CAACC,GAAR,CAAYC,UAAW,gCAFZ,EAGb,GAAEF,OAAO,CAACC,GAAR,CAAYC,UAAW,iCAHZ,CAAhB,CADwB,CAOxB;;AACA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,QAAQ,GAAG,GAAjB;AACA,QAAMC,QAAQ,GAAG,CAAC,GAAlB,CAVwB,CAYxB;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACkB,iBAAD,EAAoBC,oBAApB,IAA4CnB,QAAQ,CAAC;AAAEoB,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAA1D;;AAEA,WAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AAC3B;AACAA,IAAAA,CAAC,CAACC,eAAF;AACAD,IAAAA,CAAC,CAACE,cAAF,GAH2B,CAK3B;;AACAV,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASW,cAAT,CAAwBH,CAAxB,EAA2B;AACzB;AACAR,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,WAASY,iBAAT,CAA2BJ,CAA3B,EAA8B;AAC5B;AACAA,IAAAA,CAAC,CAACK,WAAF,CAAcH,cAAd,GAF4B,CAI5B;AACA;AACA;AACA;AACA;AAEA;;AACA,UAAMI,YAAY,GAAGb,YAAY,GAAGO,CAAC,CAACK,WAAF,CAAcE,MAAlD,CAX4B,CAY5B;;AACAb,IAAAA,eAAe,CAACf,KAAK,CAAC2B,YAAD,EAAehB,QAAf,EAAyBD,QAAzB,CAAN,CAAf;AACD;;AAED,WAASmB,gBAAT,CAA0BR,CAA1B,EAA6B;AAC3B,QAAIT,QAAJ,EAAc,CACb;AACF;;AACD,sBACE,oBAAC,QAAD;AACE,IAAA,WAAW,EAAEQ,gBADf;AAEE,IAAA,SAAS,EAAEI,cAFb;AAGE,IAAA,WAAW,EAAEK,gBAHf;AAIE,IAAA,cAAc,EAAEb,iBAJlB;AAKE,IAAA,IAAI,EAAEF,YALR;AAME,IAAA,GAAG,EAAET,OANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD;;AAED,eAAeD,cAAf","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport Viewport from \"./viewport\";\n\n// utility function for min-maxing\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nfunction DesignExplorer() {\n  const imgList = [\n    `${process.env.PUBLIC_URL}/img/8 Viewing your tasks.svg`,\n    `${process.env.PUBLIC_URL}/img/9 Contacting a client.svg`,\n    `${process.env.PUBLIC_URL}/img/10 Contacting a helper.svg`,\n  ];\n\n  // static parameters\n  const ZOOM_STEP = 10;\n  const MAX_ZOOM = 100;\n  const MIN_ZOOM = -400;\n\n  // for controlling the viewports\n  const [dragging, setDragging] = useState(false);\n  const [viewportZoom, setViewportZoom] = useState(1);\n  const [viewportCamearPos, setViewportCamearPos] = useState({ x: 0, y: 0 });\n\n  function mouseDownHandler(e) {\n    // enter the moving state\n    e.stopPropagation();\n    e.preventDefault();\n\n    // enter dragging mode\n    setDragging(true);\n  }\n\n  function mouseUpHandler(e) {\n    // exit dragging mode\n    setDragging(false);\n  }\n\n  function mouseWheelHandler(e) {\n    // stop the document from scrolling when the user mouse over this\n    e.nativeEvent.preventDefault();\n\n    // pan around the viewport using scroll wheel when the zooming mode is not active\n    // setViewportOffsetPos({\n    //   x: viewportOffsetPos.x - e.nativeEvent.deltaX,\n    //   y: viewportOffsetPos.y - e.nativeEvent.deltaY,\n    // });\n\n    // calculate zoom value\n    const newZoomValue = viewportZoom - e.nativeEvent.deltaY;\n    // set the zoom level\n    setViewportZoom(clamp(newZoomValue, MIN_ZOOM, MAX_ZOOM));\n  }\n\n  function mouseMoveHandler(e) {\n    if (dragging) {\n    }\n  }\n  return (\n    <Viewport\n      onMouseDown={mouseDownHandler}\n      onMouseUp={mouseUpHandler}\n      onMouseMove={mouseMoveHandler}\n      camearPosition={viewportCamearPos}\n      zoom={viewportZoom}\n      src={imgList}\n    />\n  );\n}\n\nexport default DesignExplorer;\n"]},"metadata":{},"sourceType":"module"}