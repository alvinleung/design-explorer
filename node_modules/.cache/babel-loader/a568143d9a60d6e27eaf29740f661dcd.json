{"ast":null,"code":"var _jsxFileName = \"/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\"; // global variables in this component\n\nlet cameraPosition = {\n  x: 0,\n  y: 0\n};\nlet zoom = 0;\nlet imageLoaded = false;\nlet viewportInitialized = false; // Canvas Implementation of the\n\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\"); // Load the svg files\n\n    let loadedImage = 0;\n    const imgList = props.src.map(imgUrl => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          imageLoaded = true;\n          console.log(\"All images loaded\");\n        }\n      });\n      return img;\n    }); // canvas update\n\n    const update = deltaTime => {\n      if (imageLoaded) {\n        // begin the renders\n        if (!viewportInitialized) {\n          initViewport(imgList);\n          viewportInitialized = true;\n        }\n\n        updateLogic(cameraPosition, zoom); // clear the canvas\n\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth); // render the content\n\n        repaintCanvas(ctx, imgList, cameraPosition, zoom);\n      }\n\n      requestAnimationFrame(update);\n    }; // begin the update cycle\n\n\n    update();\n  }, []); // the only way that the canvas code can access these var :(\n\n  cameraPosition = props.cameraPosition;\n  zoom = props.zoom;\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: canvasWidth,\n    height: canvasHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }\n  });\n} // ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n\n\nclass ViewportRenderer {\n  constructor(imgs, canvas, ctx) {\n    // zooming parameters\n    this.currentZoom = 1;\n    this.zoomThreshold = 0.01; // the amount when we say the change is big enough for zooming\n\n    this.currentZoomChanges = 0; // basically velocity of zoom\n\n    this.zooming = false; // camera position parameters\n\n    this.currentCameraPos = {\n      x: 0,\n      y: 0\n    };\n    this.currentCameraVel = {\n      x: 0,\n      y: 0\n    };\n    this.imgs = imgs;\n    this.canvas = canvas;\n    this.ctx = ctx;\n  }\n\n  initViewport(imgs) {\n    this.lowFidelityImges = imgs.map(img => cacheLowfidelityRender(img, 0.5));\n  }\n\n  update(targetCameraPosition, targetZoom) {\n    // update zoom\n    currentZoom = targetZoom; // two decimels\n    // update camera pos\n\n    currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n\n    currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n    currentCameraPos.x += currentCameraVel.x;\n    currentCameraPos.y += currentCameraVel.y;\n  }\n\n  render() {\n    const ctx = this.ctx;\n    const imgs = this.imgs; // prepare transformation for camera movement\n\n    ctx.save(); // move camera\n\n    ctx.translate(currentCameraPos.x, currentCameraPos.y);\n    ctx.scale(currentZoom, currentZoom); // render images\n\n    renderImages(ctx, imgs, true); // reset transformation\n\n    ctx.restore(); // display the debug information and round to 2 deicmals\n\n    ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n    ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n    ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n  }\n\n} // ZOOM\n\n\nlet currentZoom = 1;\nlet zoomThreshold = 0.01; // the amount when we say the change is big enough for zooming\n\nlet currentZoomChanges = 0; // basically velocity of zoom\n\nlet zooming = false; // CAMERA\n\nlet currentCameraPos = {\n  x: 0,\n  y: 0\n};\nlet currentCameraVel = {\n  x: 0,\n  y: 0\n}; // IMAGE OPTIMISATION\n\nlet lowFidelityImges = []; // init\n\nfunction initViewport(imgs) {\n  lowFidelityImges = imgs.map(img => cacheLowfidelityRender(img, 0.5));\n} // update\n\n\nfunction updateLogic(targetCameraPosition, targetZoom) {\n  // update zoom\n  currentZoom = targetZoom; // two decimels\n  // update camera pos\n\n  currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraPos.x += currentCameraVel.x;\n  currentCameraPos.y += currentCameraVel.y;\n} // render\n\n\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  // prepare transformation for camera movement\n  ctx.save(); // move camera\n\n  ctx.translate(currentCameraPos.x, currentCameraPos.y);\n  ctx.scale(currentZoom, currentZoom); // render images\n\n  renderImages(ctx, imgs, true); // reset transformation\n\n  ctx.restore(); // display the debug information and round to 2 deicmals\n\n  ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n  ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n  ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n} // pre render a low fedelity version of the image when zoom to acheive the smooth animation\n\n\nfunction cacheLowfidelityRender(img, scaleFactor) {\n  const preRenderCanvas = document.createElement(\"canvas\");\n  preRenderCanvas.width = img.width * scaleFactor;\n  preRenderCanvas.height = img.height * scaleFactor;\n  preRenderCanvas.getContext(\"2d\").drawImage(img, 0, 0, preRenderCanvas.width, preRenderCanvas.height);\n  return preRenderCanvas;\n}\n\nfunction renderImages(ctx, imgs, lowQuality) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    if (lowQuality) {\n      ctx.drawImage(lowFidelityImges[i], 0, currentDrawY, imgs[i].width, imgs[i].height);\n    } else {\n      ctx.drawImage(imgs[i], 0, currentDrawY);\n    }\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport; //resources\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0","map":{"version":3,"sources":["/Users/alvinleung/Google Drive/Projects/alvinleung-portfolio/design-explorer/src/components/designExplorer/viewport/Viewport.js"],"names":["React","useState","useRef","useEffect","useCallback","cameraPosition","x","y","zoom","imageLoaded","viewportInitialized","Viewport","props","canvasWidth","canvasHeight","canvasRef","canvas","current","ctx","getContext","loadedImage","imgList","src","map","imgUrl","img","Image","addEventListener","console","log","length","update","deltaTime","initViewport","updateLogic","clearRect","window","innerHeight","innerWidth","repaintCanvas","requestAnimationFrame","ViewportRenderer","constructor","imgs","currentZoom","zoomThreshold","currentZoomChanges","zooming","currentCameraPos","currentCameraVel","lowFidelityImges","cacheLowfidelityRender","targetCameraPosition","targetZoom","render","save","translate","scale","renderImages","restore","fillText","toFixed","scaleFactor","preRenderCanvas","document","createElement","width","height","drawImage","lowQuality","paddingBetweenImages","currentDrawY","i","clamp","value","min","max"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./Viewport.scss\";\n\n// global variables in this component\nlet cameraPosition = { x: 0, y: 0 };\nlet zoom = 0;\n\nlet imageLoaded = false;\nlet viewportInitialized = false;\n\n// Canvas Implementation of the\nfunction Viewport(props) {\n  const canvasWidth = 1920;\n  const canvasHeight = 1080;\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // initialise the canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Load the svg files\n    let loadedImage = 0;\n    const imgList = props.src.map((imgUrl) => {\n      const img = new Image();\n      img.src = imgUrl;\n      img.addEventListener(\"load\", () => {\n        console.log(\"Viewport loaded image: \" + imgUrl);\n        loadedImage++;\n\n        if (loadedImage === imgList.length) {\n          // all the image is loaded\n          imageLoaded = true;\n          console.log(\"All images loaded\");\n        }\n      });\n\n      return img;\n    });\n\n    // canvas update\n    const update = (deltaTime) => {\n      if (imageLoaded) {\n        // begin the renders\n        if (!viewportInitialized) {\n          initViewport(imgList);\n          viewportInitialized = true;\n        }\n\n        updateLogic(cameraPosition, zoom);\n\n        // clear the canvas\n        ctx.clearRect(0, 0, window.innerHeight, window.innerWidth);\n        // render the content\n        repaintCanvas(ctx, imgList, cameraPosition, zoom);\n      }\n      requestAnimationFrame(update);\n    };\n\n    // begin the update cycle\n    update();\n  }, []);\n\n  // the only way that the canvas code can access these var :(\n  cameraPosition = props.cameraPosition;\n  zoom = props.zoom;\n\n  return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight} />;\n}\n\n// ================================+\n// CODE FOR RENDERING STUFF ON CANVAS\n// ================================+\n\nclass ViewportRenderer {\n  constructor(imgs, canvas, ctx) {\n    // zooming parameters\n    this.currentZoom = 1;\n    this.zoomThreshold = 0.01; // the amount when we say the change is big enough for zooming\n    this.currentZoomChanges = 0; // basically velocity of zoom\n    this.zooming = false;\n\n    // camera position parameters\n    this.currentCameraPos = { x: 0, y: 0 };\n    this.currentCameraVel = { x: 0, y: 0 };\n\n    this.imgs = imgs;\n    this.canvas = canvas;\n    this.ctx = ctx;\n  }\n\n  initViewport(imgs) {\n    this.lowFidelityImges = imgs.map((img) => cacheLowfidelityRender(img, 0.5));\n  }\n\n  update(targetCameraPosition, targetZoom) {\n    // update zoom\n    currentZoom = targetZoom;\n\n    // two decimels\n\n    // update camera pos\n    currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n    currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n    currentCameraPos.x += currentCameraVel.x;\n    currentCameraPos.y += currentCameraVel.y;\n  }\n\n  render() {\n    const ctx = this.ctx;\n    const imgs = this.imgs;\n    // prepare transformation for camera movement\n    ctx.save();\n\n    // move camera\n    ctx.translate(currentCameraPos.x, currentCameraPos.y);\n    ctx.scale(currentZoom, currentZoom);\n\n    // render images\n    renderImages(ctx, imgs, true);\n\n    // reset transformation\n    ctx.restore();\n\n    // display the debug information and round to 2 deicmals\n    ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n    ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n    ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n  }\n}\n\n// ZOOM\nlet currentZoom = 1;\nlet zoomThreshold = 0.01; // the amount when we say the change is big enough for zooming\nlet currentZoomChanges = 0; // basically velocity of zoom\nlet zooming = false;\n\n// CAMERA\nlet currentCameraPos = { x: 0, y: 0 };\nlet currentCameraVel = { x: 0, y: 0 };\n\n// IMAGE OPTIMISATION\nlet lowFidelityImges = [];\n\n// init\nfunction initViewport(imgs) {\n  lowFidelityImges = imgs.map((img) => cacheLowfidelityRender(img, 0.5));\n}\n\n// update\nfunction updateLogic(targetCameraPosition, targetZoom) {\n  // update zoom\n  currentZoom = targetZoom;\n\n  // two decimels\n\n  // update camera pos\n  currentCameraVel.x = (targetCameraPosition.x - currentCameraPos.x) * 0.25; // add alittle bit of trailing effect\n  currentCameraVel.y = (targetCameraPosition.y - currentCameraPos.y) * 0.25; // add alittle bit of trailing effect\n\n  currentCameraPos.x += currentCameraVel.x;\n  currentCameraPos.y += currentCameraVel.y;\n}\n\n// render\nfunction repaintCanvas(ctx, imgs, cameraPosition, zoom) {\n  // prepare transformation for camera movement\n  ctx.save();\n\n  // move camera\n  ctx.translate(currentCameraPos.x, currentCameraPos.y);\n  ctx.scale(currentZoom, currentZoom);\n\n  // render images\n  renderImages(ctx, imgs, true);\n\n  // reset transformation\n  ctx.restore();\n\n  // display the debug information and round to 2 deicmals\n  ctx.fillText(\"camera x \" + currentCameraPos.x.toFixed(2), 20, 50);\n  ctx.fillText(\"camera y \" + currentCameraPos.y.toFixed(2), 20, 65);\n  ctx.fillText(\"zoom \" + currentZoom.toFixed(2), 20, 80);\n}\n\n// pre render a low fedelity version of the image when zoom to acheive the smooth animation\nfunction cacheLowfidelityRender(img, scaleFactor) {\n  const preRenderCanvas = document.createElement(\"canvas\");\n  preRenderCanvas.width = img.width * scaleFactor;\n  preRenderCanvas.height = img.height * scaleFactor;\n\n  preRenderCanvas\n    .getContext(\"2d\")\n    .drawImage(img, 0, 0, preRenderCanvas.width, preRenderCanvas.height);\n\n  return preRenderCanvas;\n}\n\nfunction renderImages(ctx, imgs, lowQuality) {\n  const paddingBetweenImages = 0;\n  let currentDrawY = 0;\n  for (let i = 0; i < imgs.length; i++) {\n    // render all the images\n    if (lowQuality) {\n      ctx.drawImage(\n        lowFidelityImges[i],\n        0,\n        currentDrawY,\n        imgs[i].width,\n        imgs[i].height\n      );\n    } else {\n      ctx.drawImage(imgs[i], 0, currentDrawY);\n    }\n\n    currentDrawY += imgs[i].height + paddingBetweenImages;\n  }\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport default Viewport;\n\n//resources\n\n// using SVG and canvas\n// https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n\n// using canvas and react hooks\n// https://itnext.io/using-react-hooks-with-canvas-f188d6e416c0\n"]},"metadata":{},"sourceType":"module"}